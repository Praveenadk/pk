import React from 'react';
import rd3 from 'react-d3-library';
import FaPlayCircleO from 'react-icons/lib/fa/play-circle-o';
import FaClose from 'react-icons/lib/fa/close';
import FaStarO from 'react-icons/lib/fa/star-o';
//import neo4j from "nodemodules/neo4j-driver/lib/v1/internal";

const divStyle = {
  margin: '60px',
  
  border: '2px solid black',
  width:'90%',
  height:'100%',
  borderRadius:'5px',
  
};
const image = {
	marginBottom:'-14px'
	
}
const form1 = {
	marginLeft:'30px',
	fontSize:'20px',
	width:'80%',
	paddings:'10px',
	height:'30px',
	borderRadius:'5px',
	border: '5px solid rgba(128, 128, 128, 0.2)'
	
};
const form2 = {
	marginLeft:'5px',
	marginBottom:'10px',
	fontSize:'15px',
	width:'100px',
	height:'25px',
	backgroundColor:'rgba(121, 85, 72, 0.42)',
	border:'none',
	borderRadius:'3px'
	
	
};
const btn = {
	    backgroundColor: 'white',
    border: 'none',
	height:'62px'
};
const form4 = {
border: '5px solid rgba(128, 128, 128, 0.2)',
	marginLeft:'30px',
	fontSize:'20px',
	width:'93%',
	paddings:'10px',
	marginBottom:'40px',
	borderRadius:'5px'
};
const form5 = {
border: '5px solid rgba(128, 128, 128, 0.2)',
	marginLeft:'30px',
	fontSize:'20px',
	width:'93%',
	paddings:'10px',
	marginBottom:'40px',
	borderRadius:'5px',
	display:'none'
};





class Product extends React.Component{
	constructor(props){
    super(props);
    this.state={
      domType: 'BeneficialOwner',
    }
 }

 changeModel(){
    var ele = document.getElementById('Domain').value;
    this.setState({domType: ele});      
 }

 _properties(){

   var BeneficialOwner = [ <option value = 'name'>name</option>,
                <option value='country_of_residence'>country_of_residence</option>,
                <option value = 'nationality'>nationality</option>];
   var Company = [ <option value = 'companynumber'>companynumber</option>];
   var Address = [ <option value = 'line1'>line1</option>,
              <option value='line2'>line2</option>,
              <option value = 'postcode'>postcode</option>,
			   <option value = 'country'>country</option>];

   switch(this.state.domType){
    case 'BeneficialOwner':
          return BeneficialOwner;
    case 'Company':
          return Company;
    case 'Address':
          return Address;
  }
}
	

	componentDidMount(){
		debugger;

	
	
	var width = 1000,
    height = 500

var svg = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height);

var force = d3.layout.force()
    .gravity(.05)
    .distance(100)
    .charge(-100)
    .size([width, height]);

d3.json("http://localhost:3000/p", function(error, json) {

    
	var edges = [];

 json.links.forEach(function(e) { 
    // Get the source and target nodes
    var sourceNode = json.nodes.filter(function(n) { return n.id === e.source; })[0],
        targetNode = json.nodes.filter(function(n) { return n.id === e.target; })[0],
type=e.type;
    // Add the edge to the array
    edges.push({source: sourceNode, target: targetNode,type:type});
});


  force
      .nodes(json.nodes)
      .links(edges)
      .start();

  var link = svg.selectAll(".link")
       .data(edges)
       .enter()
    .append("g")
    .attr("class", "link")
    .append("line")
    .attr("class", "link-line")
	   .attr("fill", "none")
	   .attr("stroke", " #000")
	   .attr("stroke-opacity", " .2")
	   .style("stroke-width", 3)
.attr('marker-end','url(#arrowhead)');
  var node = svg.selectAll(".node")
      .data(json.nodes)
      .enter().append("g")
      .attr("class", "node")
	  .style("fill",function(d) {
    if(d.labels =="Company") {
        return "rgb(222, 155, 249)";
    } else {
        return "lightsteelblue";
    }
	})
	   .on("mouseover", function(d) {
		if(d.labels =="Company"){
        return tooltip.style("visibility", "visible").text( "<id>=" + d.id+ "   Company Name:  "+d.properties.name.val +"   , Company Number="+d.properties.companynumber.val);
		}
		else if (d.labels =="Address"){
		return tooltip.style("visibility", "visible").text( "<id>=" + d.id+ "   Address:  "+d.properties.line2.val + d.properties.line1.val +"   , PostCode="+d.properties.postcode.val+"       , Country=" + d.properties.country.val);	
		}})
		 .on("mouseout", function() {
       return tooltip.style("visibility", "hidden");
        })
      .call(force.drag);
  var text1 = svg.selectAll('text')
      .data(json.nodes)
      .enter().append("svg1:text")
      .style("font-size", "10px")
      .text(function(d) { return d.id; })
	  .attr('text-anchor', 'middle')
	  .attr('alignment-baseline', 'middle')
	  .style('font-size', d => d.radius * 0.4 + 'px')
	  .attr('fill-opacity', 1);
   node.append("circle")
      .attr("class", "node")
      .attr("r", 20 );
	

var linkText = svg.selectAll(".link")
    .append("text")
    .attr("class", "link-label")
   .attr("font-family", "Arial, Helvetica, sans-serif")
    .attr("fill", "Black")
    .style("font", "normal 8px Arial")
    .attr("dy", ".35em")
    .attr("text-anchor", "middle")
    .text(function(d) {
        return d.type;
    });
	
	  svg.append('defs').append('marker')
        .attr({'id':'arrowhead',
               'viewBox':'-0 -5 10 10',
               'refX':25,
               'refY':0,
               //'markerUnits':'strokeWidth',
               'orient':'auto',
               'markerWidth':4,
               'markerHeight':4,
               'xoverflow':'visible'})
        .append('svg:path')
            .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
            .attr('fill', '#ccc')
            .attr('stroke','#ccc');
 var tooltip = d3.select("#chart")
  .append("div")
  .attr('class', 'tooltip');


	 

  
  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
     text1.attr("x", function(d) { return d.x ; })
         .attr("y", function(d) { return d.y ; })
   
	linkText
        .attr("x", function(d) {
            return ((d.source.x + d.target.x)/2);
        })
        .attr("y", function(d) {
            return ((d.source.y + d.target.y)/2);
        });

    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
	
	
  });
  
});



}


		 search(){

			var keyword=this.refs.keyword.value;
	alert("dfgs");
		var width = 1000,
    height = 800

var svg = d3.select("#chart1").append("svg")
    .attr("width", width)
    .attr("height", height);

var force = d3.layout.force()
    .gravity(.05)
    .distance(100)
    .charge(-100)
    .size([width, height]);

d3.json("http://localhost:3000/p", function(error, json) {
	var edges = [];

 json.links.forEach(function(e) { 
    // Get the source and target nodes
    var sourceNode = json.nodes.filter(function(n) { return n.id === e.source; })[0],
        targetNode = json.nodes.filter(function(n) { return n.id === e.target; })[0],
type=e.type;
    // Add the edge to the array
    edges.push({source: sourceNode, target: targetNode,type:type});
});


  force
      .nodes(json.nodes)
      .links(edges)
      .start();

  var link = svg.selectAll(".link")
       .data(edges)
       .enter()
    .append("g")
    .attr("class", "link")
    .append("line")
    .attr("class", "link-line")
	   .attr("fill", "none")
	   .attr("stroke", " #000")
	   .attr("stroke-opacity", " .2")
	   .style("stroke-width", 3)
.attr('marker-end','url(#arrowhead)');
  var node = svg.selectAll(".node")
      .data(json.nodes)
      .enter().append("g")
      .attr("class", "node")
	  .style("fill",function(d) {
    if(d.labels =="Company") {
        return "rgb(222, 155, 249)";
    } else {
        return "lightsteelblue";
    }
	})
	   .on("mouseover", function(d) {
		if(d.labels =="Company"){
        return tooltip.style("visibility", "visible").text( "<id>=" + d.id+ "   Company Name:  "+d.properties.name.val +"   , Company Number="+d.properties.companynumber.val);
		}
		else if (d.labels =="Address"){
		return tooltip.style("visibility", "visible").text( "<id>=" + d.id+ "   Address:  "+d.properties.line2.val + d.properties.line1.val +"   , PostCode="+d.properties.postcode.val+"       , Country=" + d.properties.country.val);	
		}})
		 .on("mouseout", function() {
       return tooltip.style("visibility", "hidden");
        })
      .call(force.drag);
  var text1 = svg.selectAll('text')
      .data(json.nodes)
      .enter().append("svg1:text")
      .style("font-size", "10px")
      .text(function(d) { return d.id; })
	  .attr('text-anchor', 'middle')
	  .attr('alignment-baseline', 'middle')
	  .style('font-size', d => d.radius * 0.4 + 'px')
	  .attr('fill-opacity', 1);
   node.append("circle")
      .attr("class", "node")
      .attr("r", 20 );
	

var linkText = svg.selectAll(".link")
    .append("text")
    .attr("class", "link-label")
   .attr("font-family", "Arial, Helvetica, sans-serif")
    .attr("fill", "Black")
    .style("font", "normal 8px Arial")
    .attr("dy", ".35em")
    .attr("text-anchor", "middle")
    .text(function(d) {
        return d.type;
    });
	
	  svg.append('defs').append('marker')
        .attr({'id':'arrowhead',
               'viewBox':'-0 -5 10 10',
               'refX':25,
               'refY':0,
               //'markerUnits':'strokeWidth',
               'orient':'auto',
               'markerWidth':4,
               'markerHeight':4,
               'xoverflow':'visible'})
        .append('svg:path')
            .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
            .attr('fill', '#ccc')
            .attr('stroke','#ccc');
 var tooltip = d3.select("#chart")
  .append("div")
  .attr('class', 'tooltip');


	 

  
  force.on("tick", function() {
  
		
		 link.attr({"x1": function(d){return d.source.x;},
                    "y1": function(d){return d.source.y;},
                    "x2": function(d){return d.target.x;},
                    "y2": function(d){return d.target.y;}
        });
     text1.attr("x", function(d) { return d.x ; })
         .attr("y", function(d) { return d.y ; })
   
	linkText
        .attr("x", function(d) {
            return ((d.source.x + d.target.x)/2);
        })
        .attr("y", function(d) {
            return ((d.source.y + d.target.y)/2);
        });

    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
	
	
  });
  
});

			} 

	render(){
		return(
		
		<div style={divStyle}>
  <form  id="postData">
	<div style={{marginTop:'30px'}} >
	
			<input type="text" style={form1}  placeholder="Search for Anything....." ref="keyword"
              name="search" id="search"/>
			   
			   <a href="#" >
			  <FaPlayCircleO size={50} color='#717172' onClick={this.search.bind(this)}  /></a>
			   <a href="#">
			   <FaClose size={50} color='#717172' /></a>
			    <a href="#">
			    <FaStarO size={50} color='#717172' /></a>
              
		 
	</div>
	<div >
                                    <label > Select Domain</label>
                                    <div  >
                                      <select id ="Domain" onChange = {this.changeModel.bind(this)}>
                                        <option value ="BeneficialOwner">BeneficialOwner</option>
                                        <option value ="Company">Company</option>
                                        <option value ="Address">Address</option>
                                      </select>
                                    </div>
                                </div>

                                  <div >
                                    <label className="control-label">Properties of Selected Doamin</label>
                                    <div >
                                      <select id ="properties">
                                        {this._properties()}                
                                      </select>
                                    </div>
                                  </div>
 </form>
<br/>
		   <div id='chart' style={form4}></div>
		  <div id='chart1' style={form5}></div> 
	</div>
		);
	}
	
}


export default Product;


